#Инициирует локальный репозиторий
git init

#Описываем себя, чтобы при коммите было понятно кто это наворотил
git config --global user.name "Ваше Имя"
git config --global user.email "ВашаПочта@mail.com"

#Посмотреть все конфигурации
git config -l

#Добавляет файл в “staging area” (участок подготовки), чтобы из него можно было сделать коммит
git add имяФайла.расширение

#Добавить всё из директории проекта в staging area
git add . или git add -A

#Добавить все файлы с расширением .html в staging area и прочее по аналогии
git add .html

#Покажет что уже было добавлено в “staging area” и какие файлы были изменены и ждут перемещения в staging area
git status

#Берёт файлы из staging area и “фиксирует” их в локальный репозиторий
git commit -m "Описание коммита"

#Создает сущность, называемую branch(ветвь). Ветвь - это точная копия файлов, и сразу делает на ней фокусировку
git checkout branch названиеВетки

#Отменить изменения до помещения в staging area
git checkout —названиеФайла

#Перейти в ветку
git checkout названиеВетки или git checkout codeId

#Посмотреть изменения в файлах подготовленных к коммиту
git diff --staged

#Соединяет указанную ветку с Мастером
git merge названиеВетки

#Клонирует проект из гита. Ссылку брать в самом гите
*git clone https://github.com/имяПользователя/проект.git

#Отправка изменений на сервер
git push origin master

#Запрос изменений с сервера
git pull origin master

#Отправка изменений на сервер
git push origin

#Отправка изменений на сервер, если там ещё ничего нет
git push --set-upstream origin названиеВетки

#Удалить ветку локально, когда она больше не актуальна. С ключом D удалит вообще всё (даже подготовленное к комиту)
git branch -d названиеВетки

#Удалить ветку удалённо на сервере
git push origin --delete названиеВетки

#Просмотреть список всех коммитов и их идентификаторов
git log

#Просмотреть последний коммит
git log -1 -p

#Просмотреть, что изменилось в конкретном коммите
git show b10cc123

#Игнорирование папок и файлов
Создаём файл .gitignore, в него прописываем директории и папки/разрешения папок

#Изменили прошлый коммит, не добавляя нового коммита
git commit --amend

#Удалить коммит насовсем. После ~ указываем количество коммитов сверху вниз
git reset --hard HEAD~2 

#Удалить коммит насовсем. После ~ указываем количество коммитов снизу вверх
git reset --soft HEAD~3 
